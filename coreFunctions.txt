int improvements = 0;

while(improvements < 10){
	int shortest = tourLength(tour);

	for(int i = 0; i < tour.size() -1; i++){
		for(int j = i; j < tour.size(); j++){
			vector<city*>* newTour;
			newTour = swap(i, j, tour);
			if(tourLength(newTour) < shortest){
				free(tour);
				tour = newtour;
				improvements = 0;
			}
		}
	}
}

/******************************************/

vector<city*> swap(int i, int j, vector<city*>* tour){
	vector<city*> newTour;

	for(int idx = 0; idx < i; idx++){
		newTour.push(tour.at(idx));
	}
	for(int idx = i; idx <= j; idx++){
		newTour.push(tour.at(j - (idx - i)));
	}
	for(int idx = j+1; idx < tour.size(); idx++){
		newTour.push(tour.at(idx));
	}

	return newTour;
}

int tourLength(vector<city*> tour){
	
}

double cityDistance(city* a, city* b){
	
}